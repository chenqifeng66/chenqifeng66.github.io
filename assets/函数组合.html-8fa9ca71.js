import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-0dcc4a8d.js";const p={},e=t(`<h2 id="什么是函数组合" tabindex="-1"><a class="header-anchor" href="#什么是函数组合" aria-hidden="true">#</a> 什么是函数组合</h2><p>将多个函数组合成一个函数，类似过滤器的作用</p><p><code>compose(fun1,fun2,...)(value)</code> =&gt; <code>value | fun1 | fun2 | ...</code></p><h2 id="为什么需要函数组合" tabindex="-1"><a class="header-anchor" href="#为什么需要函数组合" aria-hidden="true">#</a> 为什么需要函数组合</h2><h3 id="🌰" tabindex="-1"><a class="header-anchor" href="#🌰" aria-hidden="true">#</a> 🌰</h3><p>处理字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">stringToUpper</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">stringToArray</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;javascript&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> upperStr <span class="token operator">=</span> <span class="token function">stringToUpper</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;JAVASCRIPT&#39;</span>
<span class="token keyword">const</span> arrayStr <span class="token operator">=</span> <span class="token function">stringToArray</span><span class="token punctuation">(</span>upperStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;J&#39;,&#39;A&#39;,&#39;V&#39;,&#39;A&#39;,&#39;S&#39;,&#39;C&#39;,&#39;R&#39;,&#39;I&#39;,&#39;P&#39;,&#39;T&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上做法虽然方便使用，但会产生很多不必要的变量定义</p><p>如果有一个函数能将需要用到的函数组合起来，通过调用组合后的函数得到结果，那就会很方便，而且不需要定义很多不必要的变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>stringToUpper<span class="token punctuation">,</span> stringToArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;J&#39;,&#39;A&#39;,&#39;V&#39;,&#39;A&#39;,&#39;S&#39;,&#39;C&#39;,&#39;R&#39;,&#39;I&#39;,&#39;P&#39;,&#39;T&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路" aria-hidden="true">#</a> 实现思路</h2><p>函数组合逻辑：</p><ol><li>接收多个函数作为参数</li><li>返回一个函数</li><li>调用返回的函数时，依次调用传入函数</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// args：函数参数</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// arg：第一次为传入的参数(str),第二次为第一个函数的执行结果...</span>
    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arg<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从右往左执行可将 <code>reduce</code> 改为 <code>reduceRight</code></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>函数组合可以将多个负责单一功能的函数组合在一起，形成一个新的多功能函数</p>`,17),c=[e];function o(i,u){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","函数组合.html.vue"]]);export{d as default};
