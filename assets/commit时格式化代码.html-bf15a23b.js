import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as s,a as n}from"./app-0dcc4a8d.js";const t={},i=n(`<h2 id="安装-husky" tabindex="-1"><a class="header-anchor" href="#安装-husky" aria-hidden="true">#</a> 安装 husky</h2><p>husky：创建 git hook 的工具</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pnpm add husky -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="启用-git-hook" tabindex="-1"><a class="header-anchor" href="#启用-git-hook" aria-hidden="true">#</a> 启用 git hook</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> husky <span class="token function">install</span>
<span class="token comment"># npx husky install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该命令作用：</p><ol><li>会创建 <code>.husky</code> 目录</li><li>设置所在项目本地环境存放 <code>git hook</code> 脚本的目录位置 <code>core.hookspath = .husky</code></li></ol><p>可通过 <code>git config --local --list</code> 查看 git 本地配置</p><h2 id="添加-npm-生命周期" tabindex="-1"><a class="header-anchor" href="#添加-npm-生命周期" aria-hidden="true">#</a> 添加 npm 生命周期</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vite preview&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>prepare：在 <code>npm install</code> 之后执行</p><p>作用：在重新拉取代码执行 <code>npm install</code> 时自动启用 <code>git hook</code></p><h2 id="安装-prettier" tabindex="-1"><a class="header-anchor" href="#安装-prettier" aria-hidden="true">#</a> 安装 prettier</h2><p>prettier：格式化代码工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> prettier <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>格式化命令：<code>pnpm prettier --write 目录名</code> or <code>npx prettier --write 目录名</code></p><h2 id="安装-lint-staged" tabindex="-1"><a class="header-anchor" href="#安装-lint-staged" aria-hidden="true">#</a> 安装 lint-staged</h2><p>lint-staged：暂存区文件格式化工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> lint-staged <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="添加-lint-staged-命令" tabindex="-1"><a class="header-anchor" href="#添加-lint-staged-命令" aria-hidden="true">#</a> 添加 lint-staged 命令</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token property">&quot;*.{js,vue}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;prettier --write&quot;</span>    <span class="token comment">// 对 js、vue 文件进行格式化</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建-git-hook" tabindex="-1"><a class="header-anchor" href="#创建-git-hook" aria-hidden="true">#</a> 创建 git hook</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;pnpm lint-staged —-allow—-empty&quot;</span>
<span class="token comment"># npx husky add .husky/pre-commit &quot;npx lint-staged -—allow—-empty&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>该命令作用：</p><ol><li>在 <code>.husky</code> 目录下添加 <code>pre-commit</code> 文件</li><li>写入内容 <code>pnpm lint-staged —-allow-—empty</code></li></ol><p>注：<code>--allow--empty</code> 当撤回 commit 时允许空提交，否则撤回 commit 会报错</p><h2 id="总流程" tabindex="-1"><a class="header-anchor" href="#总流程" aria-hidden="true">#</a> 总流程</h2><ol><li><code>commit</code> 后触发 <code>pre-commit (git hook)</code> 钩子</li><li>执行 <code>pnpm lint-staged —allow--empty</code></li><li>通过 package.json 的 <code>lint-staged</code> 对所选文件执行格式化</li></ol>`,28),o=[i];function d(l,p){return e(),s("div",null,o)}const u=a(t,[["render",d],["__file","commit时格式化代码.html.vue"]]);export{u as default};
